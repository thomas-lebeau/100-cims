generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  accounts      Account[]
  sessions      Session[]
  activities    Activity[]
  Ascent        Ascent[]
  Sync          Sync[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cim {
  id        String    @id @default(cuid())
  name      String    @unique
  altitude  Int
  longitude Float
  latitude  Float
  url       String    @unique
  img       String?   @unique
  essencial Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  comarcas  Comarca[]
  Ascent    Ascent[]
}

model Comarca {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  codigo    String   @unique
  cims      Cim[]
}

model CimToComarca {
  A String
  B String

  @@unique([A, B], map: "_CimToComarca_AB_unique")
  @@index([B], map: "_CimToComarca_B_index")
  @@map("_CimToComarca")
}

model Activity {
  id              String      @id @default(cuid())
  userId          String
  name            String
  startDate       DateTime
  summaryPolyline String      @db.Text
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
  sportType       String?
  originId        String?     @db.Text
  originType      OriginType?
  syncId          String?
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Sync            Sync?       @relation(fields: [syncId], references: [id], onDelete: Cascade)
  Ascent          Ascent[]

  @@unique([userId, originType, originId(length: 20)]) // TODO: fix originId field length
  @@index([userId])
  @@index([syncId])
}

model Ascent {
  id         String    @id @default(cuid())
  cimId      String
  userId     String
  activityId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  cim        Cim       @relation(fields: [cimId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@unique([cimId, userId, activityId])
  @@index([userId])
  @@index([cimId])
  @@index([activityId])
}

model Sync {
  id         String     @id @default(cuid())
  userId     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  endAt      DateTime   @default(now())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities Activity[]

  @@index([userId])
}

enum OriginType {
  STRAVA
  GPX
}
