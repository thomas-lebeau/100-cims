generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  // url          = env("DATABASE_SHADOW_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  accounts      Account[]
  sessions      Session[]
  cims          CimToUser[]
  activities    Activity[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cim {
  id         String          @id @default(cuid())
  name       String          @unique
  altitude   Int
  longitude  Float
  latitude   Float
  url        String          @unique
  img        String?         @unique
  essencial  Boolean
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now()) @updatedAt
  comarcas   Comarca[]
  users      CimToUser[]
  activities CimToActivity[]
}

model Comarca {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  codigo    String   @unique
  cims      Cim[]
}

model CimToUser {
  cimId     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cim       Cim      @relation(fields: [cimId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([cimId, userId])
  @@unique([cimId, userId]) // TODO: allow multiple ascents
  @@index([userId])
  @@index([cimId])
}

model CimToComarca {
  A String
  B String

  @@unique([A, B], map: "_CimToComarca_AB_unique")
  @@index([B], map: "_CimToComarca_B_index")
  @@map("_CimToComarca")
}

model Activity {
  id              String          @id @default(cuid())
  userId          String
  originId        String?         @db.Text
  originType      EnumOriginType?
  name            String
  sportType       String?
  startDate       DateTime
  summaryPolyline String          @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  cims            CimToActivity[]

  @@index([userId])
}

model CimToActivity {
  cimId      String
  activityId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cim        Cim      @relation(fields: [cimId], references: [id]) // TODO: fix [referencial action](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions)
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@id([cimId, activityId])
  @@unique([cimId, activityId])
  @@index([cimId])
  @@index([activityId])
}

enum EnumOriginType {
  STRAVA
  GPX
}
